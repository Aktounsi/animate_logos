SVG Logo Animation using Machine Learning
-----------------------------------------

.. image:: https://img.shields.io/github/license/J4K08L4N63N84HN/animate_logos?style=social   :alt: GitHub
.. image:: https://img.shields.io/github/repo-size/J4K08L4N63N84HN/animate_logos?style=social   :alt: GitHub repo size
.. image:: https://img.shields.io/github/stars/J4K08L4N63N84HN/animate_logos?style=social   :alt: GitHub Repo stars


This project allows to automatically animate logos in SVG format using machine learning.

Its functionality include extracting SVG information (e.g., size, position, color), get SVG embeddings of logos by using  `DeepSVG <https://github.com/alexandre01/deepsvg/>`__'s hierarchical generative network, and an entire pipeline that takes an unprocessed logo as input and outputs an animated logo created with two different machine learning models: An approach using a genetic algorithm and an approach using the entmoot optimizer.


Table of Contents
#################

.. contents::

Description
#################

Complex machine learning algorithms like artificial neural networks, genetic algorithms, and modern optimization techniques have shaped and expanded the fields of application of computational creativity.

This work assesses the potential of such algorithms for developing and implementing a use case related to computational creativity in the field of user interface (UI) design.

We show that the use case of automated SVG logo animation can be classified as a creative task and describe the entire workflow from deciding for this specific use case, gathering enough SVG logos, mapping SVG code to a meaningful numerical embedding, and defining an animation search space, until the implementation and optimization of various machine learning models. Since no training dataset of animated logos in SVG format existed, we further developed a website to rate animations generated by our models and labelled around 20,000 animations by hand.

Using these training examples, we can increase the average aesthetic score of a generated animation from 1.4 (random animations) to 2.6 (using ENTMOOT optimization), with 0 meaning very bad and 4 meaning very good. Given this achievement of being able to generate good animations, we implement a second web application to enable users to upload their SVG logos and receive an animated version in real-time.


How to Install
##############

To use this code you have to follow these steps:

1. Start by cloning this Git repository:

.. code-block::

    $  git clone https://github.com/J4K08L4N63N84HN/animate_logos.git
    $  cd animate_logos

2. Continue by creating a new conda environment (Python 3.7):

.. code-block::

    $  conda create -n animate_logos python=3.7
    $  conda activate animate_logos

3. Install the dependencies:

.. code-block::

    $ pip install -r requirements.txt
    $ conda install -c conda-forge cairosvg

If there are problems with cairosvg please refer to `this guide <https://cairosvg.org/documentation/#installation/>`__.

Besides the code of this repository one other installation is necessary, to use the application.
For training our optimization model for the generation of logo animations, we use the commercial `Gurobi Optimizer <https://www.gurobi.com/>`__
with a `free academic licence <https://www.gurobi.com/academia/academic-program-and-licenses/>`__. You can find a detailed
guide to install Gurobi on your computer `here <https://www.gurobi.com/documentation/9.1/quickstart_mac/software_installation_guid.html#section:Installation/>`__.

For completeness you would need the `labeling website <https://animate-logos.web.app/>`__ (`Github <https://github.com/J4K08L4N63N84HN/animate_logos_label_website>`__) where users can rate the quality of animations.


How to Use
##########

The repository serves two functions.
On the one hand it is a documentation of our final computational creativity system and can be used to reproduce our results and serve as basis for further research.
For this you can retrace the model process with the help of the jupyter notebooks.
On the other hand it is a final product, that can be used in two ways.
Either you start the included Flask App and follow the instructions on the application or you use the code in Python directly.

You can use the flask app with the following command.

.. code::

    $ export FLASK_APP=flask_app.py
    $ flask run

If you want to use the pipeline you can either use the notebook 6_logo_animation_pipeline or the following code:

.. code:: python

    from src.pipeline import Logo
    logo = Logo(data_dir='path/to/my/svgs/logo.svg')
    logo.animate()

Detailed documentation and usage instructions can be found `here <https://animate-logos.readthedocs.io/en/latest/>`__.


Credits
#######

The project started in November 2020 as a Masters Team Project at the University of Mannheim. The project team consists of:

* `Rebecca Armbruster <https://github.com/rebeccaarmbruster/>`__
* `Jonathan Baumert <https://github.com/JonathanBt/>`__
* `Tim Bleil <https://github.com/thb97/>`__
* `Jakob Langenbahn <https://github.com/J4K08L4N63N84HN/>`__
* `Jan Schwedhelm <https://github.com/janschwedhelm/>`__
* `Sarah Sester <https://github.com/sarahsester/>`__

Reference
#########

To get an embedding of SVG logos, we used an approach described by Alexandre Carlier, Martin Danelljan, Alexandre Alahi and Radu Timofte in their paper `DeepSVG: A Hierarchical Generative Network for Vector Graphics Animation <https://arxiv.org/pdf/2007.11301.pdf/>`__ by using the code from this `repository <https://github.com/alexandre01/deepsvg/>`__. You can find the code in the directories src.preprocessing.configs and src.preprocessing.deepsvg.

License
#######

This repository is licenced under the GPL-3.0 License. If you have any enquiries concerning the use of our code, do not hesitate to contact us.







